// Code generated by MockGen. DO NOT EDIT.
// Source: page_detail/usecase/get_page_specific_detail.go

package mock_usecase

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	model "github.com/tpranoto/gochallenge/page_detail/model"
	reflect "reflect"
)

// MockPageDetail is a mock of PageDetail interface
type MockPageDetail struct {
	ctrl     *gomock.Controller
	recorder *MockPageDetailMockRecorder
}

// MockPageDetailMockRecorder is the mock recorder for MockPageDetail
type MockPageDetailMockRecorder struct {
	mock *MockPageDetail
}

// NewMockPageDetail creates a new mock instance
func NewMockPageDetail(ctrl *gomock.Controller) *MockPageDetail {
	mock := &MockPageDetail{ctrl: ctrl}
	mock.recorder = &MockPageDetailMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockPageDetail) EXPECT() *MockPageDetailMockRecorder {
	return _m.recorder
}

// GetPageDetail mocks base method
func (_m *MockPageDetail) GetPageDetail(ctx context.Context, url string) (model.PageDetailsData, error) {
	ret := _m.ctrl.Call(_m, "GetPageDetail", ctx, url)
	ret0, _ := ret[0].(model.PageDetailsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPageDetail indicates an expected call of GetPageDetail
func (_mr *MockPageDetailMockRecorder) GetPageDetail(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetPageDetail", reflect.TypeOf((*MockPageDetail)(nil).GetPageDetail), arg0, arg1)
}
